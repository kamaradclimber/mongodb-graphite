#!/usr/bin/env ruby

require 'mongo'
require 'graphite'
require 'peach'

graphite_server = ARGV[0]

g = Graphite::Logger.new(graphite_server)

to_ignore =[ "set", "repl", "time","qr|qw","ar|aw","conn"]
to_convert = ["mapped","vsize","res","netIn","netOut"]
output_average = ["mapped","vsize","res","locked","idxmiss"]
output_sum = ["netIn", "netOut","insert","query","update","delete","getmore","command","flushes","faults"]
prefix_common = "criteo.mongodb."

def convert(s)
  mul = case s[-1] 
    when "b"
      1
    when "k"
      1024
    when "m"
      1024 * 1024
    when "g"
      1024 * 1024 *1024
    when "t"
      1024 * 1024 * 1024 *1024
    else 
      raise "not convertible"
    end
  s[0..-1].to_f * mul
end





@conn = Mongo::Connection.new


@isdbgrid  = {"isdbgrid" => 1}
if @conn["admin"].command(@isdbgrid)["ok"] == 1
  puts "mongos"
else 
  puts "not mongos => you should not run this if you are not in a cluster"
end

shards = Array.new

puts @conn["config"]["shards"].find().each { |shard|  shards << shard["host"] }

shards.peach { |s|
  host,port =  s.split(/,|\//)[1].split(':')
  #puts "shard : ", host,port
  connHost = Mongo::Connection.new(host, port)
  slaves = Array.new
  connHost["admin"].command({ "isMaster" => 1 } )["hosts"].each { |slave| slaves << slave}
  slaves.peach { |slave|
    host, port = slave.split(':')
    timestamp =  Time.now.getutc.to_i
    result= `mongostat -n 60 --host #{host} --port #{port}   `.split("\n")
    #timestamp +=  Time.now.getutc.to_i
    #timestamp /= 2
    headers, values = result[1], result[2..-1]
    headers = headers.gsub(' %','').gsub('*','').gsub('idx miss','idxmiss').split
    values= values.delete_if {|line| line.start_with?('insert')}.map { |line| line.gsub('*','').split}
    values = values.transpose
    
    prefix = prefix_common + host +"."+port+"."
    headers = headers.map { |key| prefix+key }
    metrics = Hash[headers.zip(values)]
    to_ignore.each { |key| metrics.delete(prefix + key) }
    to_convert.each { |key| metrics[prefix + key] = metrics[prefix+key].map {|val| convert(val)}}
    output_average.each { |key| metrics[prefix+key] = metrics[prefix+key].inject(0.0) {|sum,el| sum+(el.to_i) } / metrics[prefix+key].size }
    output_sum.each { |key| metrics[prefix+key] = metrics[prefix+key].inject(0) {|sum,el| sum+(el.to_i)} }
    g.log(timestamp, metrics)

  }
}


