#!/usr/bin/env ruby

require 'rubygems'
require 'mongo'
require 'graphite'
require 'statsd'
require 'peach'

require 'optparse'
require 'ostruct'

COLLECTORS = %w{graphite statsd none}

class InitOptions
  def initialize
    @opts = OptionParser.new do |opts|
      opts.banner = "Usage: mongodb-graphite {SERVER_NAME} {PORT} [options]"
      opts.separator ""
      opts.separator "SERVER_NAME = Target server for data collection. Optional if collector is set to none."
      opts.separator "PORT        = Port for target server for data collection. Defaults to 2003 for Graphite and 8125 for statsd."
      opts.separator ""
      opts.separator "Options:"
      
      opts.on("-c", "--collector COLLECTOR", COLLECTORS, "Stats collection type. One of #{COLLECTORS.join(', ')}.",
      																					        "Defaults to none. 'None' simply primpts to stdout.") do |collector|
				@options.collector = collector
			end
			
			opts.on("-h", "--host MONGOS", "Hostname for mongos instance. Defaults to localhost.") do |host|
				@options.host = host
			end
      
			opts.on("-p", "--port PORT", Integer, "Port number for mongos instance. Defaults to 27017.") do |port|
				@options.port = port
			end
      
      opts.separator ""
      opts.separator "Metric Path Options:"
      
      opts.on("--host-trim VALUE", "Value to trim from the end of the hostname.",
      																		 "May be specified multiple times.") do |host_trim|
				@options.host_trim << host_trim
			end
      
      opts.on("--prefix PREFIX", "Prefix to prepend to all metric paths.") do |prefix|
      	@options.prefix = prefix
      end

      opts.on("--suffix SUFFIX", "Suffix to append to all metric paths.") do |suffix|
      	@options.suffix = suffix
      end
      
      opts.on("--host-prefix PREFIX", "Prefix to prepend before the host name in metric paths.",
                                      "Has no impact if the hostname is excluded.") do |prefix|
        @options.host_prefix = prefix
      end

      opts.on("--host-suffix SUFFIX", "Suffix to append after the host name in metric paths.",
                                      "Has no impact if the hostname is excluded.") do |suffix|
        @options.host_suffix = suffix
      end
      
      opts.on("--[no-]reverse", "Enables/Disables reversing the hostname when creating the",
      								 					"metric path. Defaults to reversing the hostname.") do |reverse|
				@options.reverse = reverse
			end
			
			opts.on("--exclude-hostname", "Exclude the hostname entirely when creating the metric path.") do |exclude|
				@options.exclude_hostname = exclude
			end

      opts.separator ""
      opts.separator "Common options:"

      # No argument, shows at tail.  This will print an options summary.
      # Try it and see!
      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end
    end
  end

  def parse(args)
    @options = OpenStruct.new
    @options.collector = "none"
    @options.host = "localhost"
    @options.port = 27017
    
    @options.prefix = ""
    @options.suffix = ""
    @options.host_prefix = ""
    @options.host_suffix = ""
    @options.host_trim = []
    @options.reverse = true
    @options.exclude_hostname = false

    @opts.parse!(args)
    @options
  end

  def help
    puts @opts
  end
end

option_parser = InitOptions.new
options = option_parser.parse(ARGV)

server_url = ARGV[0]
server_port = nil
if ARGV.length > 1
  server_port = ARGV[1].to_i
else
  server_port = case options.collector
    when "graphite" then 2003
    else 8125
  end
end

##############################
# Check minimum params
if server_url.nil? && ! options.collector == "none"
	option_parser.help()
  exit
end

##############################
# Setup connections for collectors
graphite_logger = nil
if options.collector == "graphite"
	graphite_logger = Graphite::Logger.new("#{server_url}:#{server_port}")
end

statsd = nil
if options.collector == "statsd"
  statsd = Statsd.new(server_url, server_port)
end

def treat_replicaset(shard_name, g, host, port)
  shard_nodes = []
  shard_host = nil
  begin
    # Open connection to shard
    shard_host = Mongo::Connection.new(host, port)
    
    # Retrieve list of servers excluding arbiters
    shard_nodes = shard_host["admin"].command({ "isMaster" => 1 } )["hosts"]
  ensure
    shard_host.close unless shard_host.nil?
  end
    
  # Iterate over nodes and retrieve server status
  shard_nodes.peach do |shard_node|
    node_host, node_port = shard_node.split(':')
    puts "#{shard_name}/#{node_host}: retrieving stats"

    timestamp =  Time.now.getutc.to_i
    
    # Establish connection to node and retrieve stats
    is_master = false
    stats = nil
    node_conn = nil
    begin
      node_conn = Mongo::Connection.new(node_host, node_port)
      stats = node_conn["admin"].command({"serverStatus" => 1})
      is_master = node_conn["admin"].command({"isMaster" => 1})["ismaster"]
    rescue
      puts "Unable to connect to #{shard_name}/#{node_host}"
      next
    ensure
      node_conn.close unless node_conn.nil?
    end
    
    # Prepare the prefix
    prefix = options.prefix
    unless options.exclude_hostname
      hostname = host
      options.host_trim.each do |trim|
        hostname = host.sub(/#{trim}$/, "")
      end
      
      if options.reverse
        host_parts = hostname.split(".")
        host_parts.reverse!
        hostname = host_parts.join(".")
      end
      
      options.host_prefix += "." unless options.host_prefix == "" || options.host_prefix =~ /[.]$/
      
      prefix += "." unless prefix == "" || prefix =~ /[.]$/
      prefix += options.host_prefix unless options.host_prefix.nil? || options.host_prefix.length == 0
      prefix += hostname
      prefix += "." + options.host_suffix unless options.host_suffix.nil? || options.host_suffix.length == 0
    end
    
    prefix += "." unless prefix == "" || prefix =~ /[.]$/ 

    # Collect all of the metrics
    metrics = {}
    %w{bits resident virtual mapped mappedWithJournal}.each do |mem|
      metrics[prefix + "mem.#{mem}"] = stats["mem"][mem]
    end
    
    %w{totalTime lockTime ratio}.each do |global_lock|
      metrics[prefix + "globalLock.#{global_lock}"] = stats["globalLock"][global_lock]
    end
    
    %w{total readers writers}.each do |lock_detail|
      metrics[prefix + "globalLock.currentQueue.#{lock_detail}"] = stats["globalLock"]["currentQueue"][lock_detail]
      metrics[prefix + "globalLock.activeClients.#{lock_detail}"] = stats["globalLock"]["activeClients"][lock_detail]
    end
    
    %w{flushes total_ms average_ms last_ms}.each do |flush|
      metrics[prefix + "backgroundFlushing.#{flush}"] = stats["backgroundFlushing"][flush]
    end
    
    %w{totalOpen clientCursors_size timedOut}.each do |cursor|
      metrics[prefix + "cursors.#{cursor}"] = stats["cursors"][cursor]
    end
    
    metrics[prefix + "connections.current"] = stats["connections"]["current"]
    metrics[prefix + "connections.available"] = stats["connections"]["available"]

    metrics[prefix + "extra.head_bytes"] = stats["extra_info"]["heap_usage_bytes"]
    metrics[prefix + "extra.page_faults"] = stats["extra_info"]["page_faults"]

    %w{insert query update delete getmore command}.each do |opcounter|
      metrics[prefix + "opcounters.#{opcounter}"] = stats["opcounters"][opcounter]
      metrics[prefix + "opcountersRepl.#{opcounter}"] = stats["opcountersRepl"][opcounter] unless is_master
    end
    
    %w{regular warning msg user rollovers}.each do |assert_counter|
      metrics[prefix + "asserts.#{assert_counter}"] = stats["asserts"][assert_counter]
    end
    
    %w{bytesIn bytesOut numRequests}.each do |network|
      metrics[prefix + "network.#{network}"] = stats["network"][network]
    end
    
    %w{commits journaledMB writeToDataFilesMB compression commitsInWriteLock earlyCommits}.each do |dur|
      metrics[prefix + "dur.#{dur}"] = stats["dur"][dur]
    end
    
    %w{dt prepLogBuffer writeToJournal writeToDataFiles remapPrivateView}.each do |dur|
      metrics[prefix + "dur.timeMs.#{dur}"] = stats["dur"]["timeMs"][dur]
    end
       
    # Dump the metrics to the appropriate collector         
    if options.collector == "graphite"
      g.log(timestamp, metrics)
    elsif options.collector == "statsd"
      metrics.keys().each do |metric_key|
        statsd.gauge(metric_key, metrics[metric_key])
      end
    else
      metrics.keys.sort.each { |key| puts "#{key}: #{metrics[key]}" }
    end
  end
end


##############################
# Setup MongoDB connection
@mongos_conn = Mongo::Connection.new(options.host, options.port)

# Verify we're pointing at a mongos instance
@isdbgrid  = {"isdbgrid" => 1}
unless @mongos_conn["admin"].command(@isdbgrid)["ok"] == 1
  puts "not mongos : Will monitor a simple replicaset"
  @mongos_conn
  treat_replicaset("replicaset", graphite_logger,host,port)
  exit
end

# Retrieve shard data
shards = {}
@mongos_conn["config"]["shards"].find().each { |shard|  shards[shard["_id"]] = shard["host"] }

# Iterate over shards
shards.keys.peach do |shard_name|
  puts "Processing shard: #{shard_name}"
  host,port =  shards[shard_name].split(/,|\//)[1].split(':')
  treat_replicaset(shard_name, graphite_logger,host,port)
end
